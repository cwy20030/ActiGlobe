% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/CosinorM.KDE.R
\name{CosinorM.KDE}
\alias{CosinorM.KDE}
\title{KDE-based circadian cosinor summary}
\usage{
CosinorM.KDE(time, activity, bw = 0.4, grid = 360)
}
\arguments{
\item{time}{Numeric vector of event times in hours. Values are interpreted
modulo 24 and must lie in [0, 24). If not numeric, the function will
attempt to convert using an internal function: `C2T()`.}

\item{activity}{Numeric vector of non-negative weights corresponding to
each time point. If not numeric, the function will coerce to numeric.}

\item{bw}{Numeric scalar. Kernel standard deviation on the circular scale
in radian. Controls smoothing of the wrapped Gaussian kernel. Default 0.4.}

\item{grid}{Integer. Number of evaluation points for the circular KDE grid.
Default 360 (i.e., one-degree resolution on the 0..2*pi circle).}
}
\value{
A list of class c("CosinorM.KDE") with elements:
  * `method`: KDE
  * `tau`: 24 (period in hours)
  * `time`: The time coordiantes of the recording.
  * `kdf`: data.frame with columns
         - `θ`, angular grid in radians
         - `density`, KDE values
         - `hour` grid in hours
  * `coef.cosinor`: named numeric vector with entries `MESOR`, `Beta`, `Gamma`, `Amplitude`, `Acrophase.rad`, and `Acrophase.hr`
}
\description{
Fit a wrapped Gaussian kernel density estimate (KDE) on circular time
(hours of day) weighted by activity and extract cosinor summaries:
MESOR, first-harmonic coefficients (β, γ), Amplitude and Acrophase.
}
\details{
This function builds a circular KDE from event times (hours in [0,24))
and non-negative weights (activity). The KDE is computed on a regular grid
over [0, 2*pi) using a wrapped Gaussian kernel with specified bandwidth.
Cosinor quantities are obtained by numerical integration of the KDE:
MESOR is the mean level, β and γ are the first-harmonic cosine and
sine coefficients, Amplitude is the magnitude of the first harmonic, and
Acrophase is the peak time expressed in radian and hour.

The `"Wrapped Gaussian KDE"` method estimates rhythmic characteristics via a smooth circular density from weighted time-point observations, then extracts harmonic parameters via numerical integration over the circle. Unlike the closed-form solution of the traditional linear cosinor model [`CosinorM`], the model derives parameters from the fitted smoothed density.
}
\section{Circular KDE construction}{

For each time coordinate, we can convert them into angular coordinates:
`θ = (time %% 24) / 24 * 2π`.
This procedure defines a regular grid over `[0, 2π]` for the KDE.

To compute the KDE based on the recorded activities, the algorithm then compute the shortest distance between each time angular coordinate and each pre-defined grid point (default = 360 equally spaced points on the circle).
`diffs = (tg - θ + π) %% (2π) - π`
Note that points near the 0 or 2π cut are treated as neighbors rather than far apart.

Given that the recorded activities closest to the a grid coordinate would contribute more localized information than those afar, the grid–time distances can then be used as weighting for each recording.
`f(gt) = sum(activity * kernel)`

`kernel: A mean-centred Gaussian kernel.`
`f(gt): The estimated circular density at the angle gt`
}

\section{Harmonic integration}{

Integrate the density and its projections using the trapezoid rule:
  `I0 = ∫ f(θ) dθ`
  `Icos = ∫ f(θ) * cos(θ) dθ`
  `Isin = ∫ f(θ) * sin(θ) dθ`

These integrals approximate the first Fourier harmonic of the circular density.
}

\section{Parameter definitions}{

`MESOR = I0 / (2π)`, the mean level of the density.
`a1 = Icos / π`, cosine coefficient.
`b1 = Isin / π`, sine coefficient.
}

\section{Amplitude estimation}{

Amplitude (A) is calculated from the harmonic coefficients:
`A = sqrt(a1^2 + b1^2)`
}

\section{Acrophase interpretation}{

Acrophase (φ) is derived from:
`φ = atan2(-b1, a1) %% (2π)`

and converted to clock time:
`Acrophase_hour = φ * 24 / (2π)`
}

\examples{
require(stats)
require(graphics)


\dontrun{
# Import data
FlyEast

BdfList =
BriefSum(df = FlyEast ,
         SR = 1/60,
         Start = "2017-10-24 13:45:00")

# Let's extract actigraphy data from a single day
df <- BdfList$df
df <- subset(df, df$Date == "2017-10-27")

fit <- CosinorM.KDE(time = df$Time,
                    activity = df$Activity,
                     bw = 0.4,
                     grid = 360)

# inspect coefficients

fit$coef.cosinor

# plot KDE in hours
plot(fit$kdf$hour, fit$kdf$density, type = "l", xlab = "Hour", ylab = "KDE")


}
}
\seealso{
`"cosinor"` model implementations and circular KDE methods
}
\keyword{KDE}
\keyword{circadian}
\keyword{circular}
\keyword{cosinor}
