name: Update traffic badges (self-contained)

on:
  schedule:
    - cron: '0 6 * * *'   # daily 06:00 UTC
  push:
    branches: [ main ]

permissions:
  contents: write
  actions: read

jobs:
  traffic_badge:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get traffic, render badges and push
        uses: actions/github-script@v7
        env:
          BADGE_BRANCH: badges
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const path = require('path');

            const owner = context.repo.owner;
            const repo = context.repo.repo;

            // helper to fetch traffic endpoint
            async function getTraffic(endpoint) {
              const url = `/repos/${owner}/${repo}/traffic/${endpoint}`;
              try {
                const resp = await github.request(`GET ${url}`);
                return resp.data;
              } catch (err) {
                core.error(`Traffic API ${endpoint} error: ${err}`);
                return null;
              }
            }

            // simple badge SVG generator (label | value)
            function makeBadge(label, value, color = 'brightgreen') {
              const labelEsc = label.replace(/&/g,'&amp;').replace(/</g,'&lt;');
              const valueEsc = String(value).replace(/&/g,'&amp;').replace(/</g,'&lt;');
              const widthLabel = Math.max(40, 8 * labelEsc.length);
              const widthValue = Math.max(40, 8 * valueEsc.length);
              const totalWidth = widthLabel + widthValue;
              return `<?xml version="1.0" encoding="UTF-8"?>
<svg xmlns="http://www.w3.org/2000/svg" width="${totalWidth}" height="20" role="img" aria-label="${label}: ${value}">
  <linearGradient id="b" x2="0" y2="100%">
    <stop offset="0" stop-color="#bbb" stop-opacity=".1"/>
    <stop offset="1" stop-opacity=".1"/>
  </linearGradient>
  <rect rx="3" width="${totalWidth}" height="20" fill="#555"/>
  <rect rx="3" x="${widthLabel}" width="${widthValue}" height="20" fill="${color}"/>
  <rect rx="3" width="${totalWidth}" height="20" fill="url(#b)"/>
  <g fill="#fff" text-anchor="middle" font-family="DejaVu Sans,Verdana,Geneva,sans-serif" font-size="11">
    <text x="${widthLabel/2}" y="14">${labelEsc}</text>
    <text x="${widthLabel + widthValue/2}" y="14">${valueEsc}</text>
  </g>
</svg>`;
            }

            // fetch traffic
            const views = await getTraffic('views');
            const clones = await getTraffic('clones');

            // compute counts
            const viewsCount = views ? (views.count || 0) : 0;
            const clonesCount = clones ? (clones.count || 0) : 0;

            // weekly counts use views?.views which is array of last 14 days; sum last 7
            function sumLastN(arr, n=7) {
              if (!Array.isArray(arr)) return 0;
              const last = arr.slice(-n);
              return last.reduce((s,item)=>s + (item.count || 0), 0);
            }
            const viewsWeek = views && views.views ? sumLastN(views.views, 7) : 0;
            const clonesWeek = clones && clones.clones ? sumLastN(clones.clones, 7) : 0;

            // prepare output dir
            const outDir = 'traffic_output';
            if (!fs.existsSync(outDir)) fs.mkdirSync(outDir);

            // write badges
            fs.writeFileSync(path.join(outDir, 'views.svg'), makeBadge('views', viewsCount, '#4caf50'));
            fs.writeFileSync(path.join(outDir, 'clones.svg'), makeBadge('clones', clonesCount, '#2196f3'));
            fs.writeFileSync(path.join(outDir, 'views-week.svg'), makeBadge('views/week', viewsWeek, '#ff9800'));
            fs.writeFileSync(path.join(outDir, 'clones-week.svg'), makeBadge('clones/week', clonesWeek, '#ffc107'));

            core.info(`Wrote badges: views=${viewsCount} clones=${clonesCount} viewsWeek=${viewsWeek} clonesWeek=${clonesWeek}`);

            // commit & push to badges branch
            const branch = process.env.BADGE_BRANCH || 'badges';
            // configure git
            await exec.exec('git', ['config', 'user.name', 'github-actions[bot]']);
            await exec.exec('git', ['config', 'user.email', 'github-actions[bot]@users.noreply.github.com']);

            // create orphan branch locally to avoid mixing history
            try {
              // fetch remote branch if exists
              await exec.exec('git', ['fetch', 'origin', branch]);
              // create temporary worktree to build branch content
            } catch (e) {
              // harmless if branch does not exist
            }

            // Create a temp directory, copy badges there, and force push
            const tmpDir = 'badge_tmp';
            if (fs.existsSync(tmpDir)) fs.rmSync(tmpDir, { recursive: true, force: true });
            fs.mkdirSync(tmpDir);
            // copy files
            const files = fs.readdirSync(outDir);
            files.forEach(f => fs.copyFileSync(path.join(outDir, f), path.join(tmpDir, f)));

            // commit and push from tmpDir
            await exec.exec('bash', ['-lc', `
              set -e
              git init
              git remote add origin https://x-access-token:${process.env.GITHUB_TOKEN}@github.com/${owner}/${repo}.git
              git checkout --orphan tmp_branch || true
              git rm -rf . || true
              cp -r ${tmpDir}/* .
              git add -A
              git commit -m "chore: update traffic badges" || true
              git push --force origin HEAD:${branch}
            `]);

            core.info('Badges pushed to branch: ' + branch);
